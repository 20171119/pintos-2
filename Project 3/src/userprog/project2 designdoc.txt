---- TEAM ----
>> Team name.

>> Fill in the names, email addresses and contributions of your team members.

Eunchan Kim <pavian@kaist.ac.kr> (50)
Youngki Hong <h20091045@kaist.ac.kr> (50)

contribution1 + contribution2 = 100

>> Specify how many tokens your team will use.
2개 사용하겠습니다.

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while preparing your submission, other than the Pintos documentation, course text, lecture notes, and course staff.


ARGUMENT PASSING
===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or `struct' member, global or static variable, `typedef', or enumeration.  Identify the purpose of each in 25 words or less.
---- ALGORITHMS ----
Argument passing 을 위해 특별히 새로 선언한 struct 는 없다.

>> A2: Briefly describe how you implemented argument parsing.  How do you arrange for the elements of argv[] to be in the right order? How do you avoid overflowing the stack page?
Whild(token)
{
Arg[argc] = token;
Argc ++;
Token = strtok_r(NULL, “ “, &ptr);
} 에서 먼저 각각의 argument들의 file_name에서의 위치를 strtok_r을 통해 arg[argc]에 저장한다. 그 후 arg의 뒤에서부터 스택에 메모리를 복사하므로 맨 뒤의 argument가 맨 처음 stack에 push되게 하였다. 
핀토스 매뉴얼에 보면 cmdline은 최대 128바이트라고 했으므로, 그 범위안에서만 동작할 수 있게 arg나 argv의 메모리 할당도 그와 비슷한 수준으로 해주었다. 
---- RATIONALE ----
>> A3: Why does Pintos implement strtok_r() but not strtok()?
Strtok_r은 strtok와 달리 스트링 내에서의 위치를 저장할 포인터를 따로 인자로 받으므로 여러 쓰레드가 동시에 돌아갈 경우에도 안전하다. 반대로 strtok는 내부에서 스트링 내의 위치를 저장하므로 여러 쓰레드가 동시에 돌 경우에는 race 컨디션이 발생할 수 있어 thread_sasfe하지 않다.
>> A4: In Pintos, the kernel separates commands into a executable name and arguments.  In Unix-like systems, the shell does this separation.  Identify at least two advantages of the Unix approach.
일단 kernel 이 아닌 shell이 argument passing을 할 경우 invalid하거나 이상한 command line 이 들어왔을 때에 shell 선에서 먼저 처리를 하므로 kernel이 하는 것보다 안전하다. 
또한 shell이 이것을 처리하면 커널이 하는 것보다 좀 더 효율적인 operation들을 할 수 가 있다.
SYSTEM CALLS
===================

---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or `struct' member, global or static variable, `typedef', or enumeration.  Identify the purpose of each in 25 words or less.
Struct thread에
Int parent_tid(부모 쓰레드의   tid);
struct file * executable(이 쓰레드가 로드한  executable의 포인터; 
struct list file_list; (쓰레드가  open해서 얻은 file들을 관리하는 리스트. Struct file_descriptor의 리스트임) 
struct list child_list; (자식 쓰레드들의 리스트. Struct child_process의 리스트이다.
struct list_elem all_elem; (모든 쓰레드들을 포함하는 리스트 all_thread_list에 넣기위한 elem이다)
int is_loaded(만약 이 쓰레드가 executable을 로드하는 쓰레드라면, 로드가 성공했는지 실패했는지를 저장함) 
struct file_descriptor
{
 Int fd;  // open된 파일의 fd
 Struct file * file;  // struct file * 를 저장
 Struct list_elem elem; // struct thread 의 file_list에 넣기위한 elem;
}
Struct child_process
{
 Int pid; // thread의 pid
 Bool is_exited;  // 종료되었는지 아닌지를 표시
 Int exit_status; // exit했을 경우(is_exited == true)일 때 exit의 argument
 Bool is_p_waiting; // parent thread가 이 pid의 쓰레드에 대해 wait을 하고 있는지 아닌지 저장
 Struct list_elem elem; // struct thread의 child_list에 넣기위한 elem;
}
Struct list all_thread_list; // 모든 쓰레드들은 생성되면 이 리스트에 들어감. 쓰레드의 tid 만 알면 이 리스트에서 해당 쓰레드를 찾을 수 있다.


>> B2: Describe how file descriptors are associated with open files. Are file descriptors unique within the entire OS or just within a single process?
system call open내부에 file descriptor를 static int fd = 2;같이 선언하여서 OS가 fd를 기준으로 각각의 porcess의 file에게file descriptors배정하므로  file descriptors는 OS 전체에서 유일한 값을 가진다.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the kernel.
system call이 호출되면서 stack에 저장해 놓은 argument를 읽어 와야 합니다. 여기서 f->esp 포인터를 이용해야 하는데 포인터가 user stack의 범위인지 mapped된 영역을 가리키고 있는 지를check_ptr_validity()함수로 검사하고 valid하다면 read의 첫 번째 인자 fd가 0인 경우input_getc()를 이용하여 읽어오고 write의 인자 fd가 1인 경우 putbuf()를 이용하여 buffer를 출력하게 하고 fd가 0 과 1이 아니면 (저희는 fd를 3부터 할당하였습니다. Fd 2는 STDERR를 사용한다고 알고 있습니다.)  현재 thread가 가지고 있는 file list에서 해당 file descriptor가 없으면 -1을 반환하고 있다면 file_read()와 file_write()를 이용하여 구현하였습니다.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data to be copied from user space into the kernel.  What is the least and the greatest possible number of inspections of the page table (e.g. calls to pagedir_get_page()) that might result?  What about for a system call that only copies 2 bytes of data?  Is there room for improvement in these numbers, and how much?
System call 이 full page의 데이터를 보가하려고 한다면, 최대 2번만 pagedir_get_page를 해주면 될 것이다. 2바이트의 데이터를 복사하는 경우에는, 역시 최대 2번의 pagedir_get_page 가 필요할 것이다. 만약 read 와 write에서 page fault가 나기 전 까지 pointer체크를 해주지 않는다면, 더 적은 inspection이 가능할 것이다.
>> B5: Briefly describe your implementation of the "wait" system call and how it interacts with process termination.
 “wait” system call은 f->esp+4가 user stack에 위치해 있는지 확인하고 user stack이 아니면 exit(-1)을 호출하고 맞는다면 4byte를 읽고 return process_wait(*(int *)(f->esp+4))를 실행한다.
process_wait(tid_t child_tid)함수는 1) child_tid르 TID를 가진 curret thread의 child thread를 찾는다. 1_a)child thread가 없다면 bad-pid case로 -1을 반환한다.  2)child thread가 있다면 이 thread가 종료된 상태인지 is_exited의 변수를 이용해 확인한다. 2_a) 종료된 상태이면 exit status를 확인하고 resoure를 정리해주고 exit status를 반환한다. 2_b) 종료되지 않은 상태이면 wait-twice case를 확인하기 위해 child thread가 현재 parent thread가 기다리고 있는지 확인하고 맞다면 -1을 반환한다. 2_c) 종료되지 않았고 parent thread가 기다리고 있지 않으면 current thread는 이 child thread가 종료될 때 까지 기다려야 한다. Child thread내부에 is_p_waiting을 true로 바꾸고 current thread(parent thread)를 block 시킨다. blcoked된 parent는 child가 종료되면서 unblock을 호출로 실행된다. Child thread의 exit status를 저장하고 child thread의 resource를 정리해주고 exit status를 반환한다.
>> B6: Any access to user program memory at a user-specified address can fail due to a bad pointer value.  Such accesses must cause the process to be terminated.  System calls are fraught with such accesses, e.g. a "write" system call requires reading the system call number from the user stack, then each of the call's three arguments, then an arbitrary amount of user memory, and any of these can fail at any point.  This poses a design and error-handling problem: how do you best avoid obscuring the primary function of code in a morass of error-handling?  Furthermore, when an error is detected, how do you ensure that all temporarily allocated resources (locks, buffers, etc.) are freed?  In a few paragraphs, describe the strategy or strategies you adopted for managing these issues.  Give an example.
static int                                                                       
get_user (const uint8_t * uaddr)                                                 
 {                                                                                
   int result;                                                                    
   asm ("movl $1f, %0; movzbl %1, %0; 1:"                                         
         : "=&a" (result) : "m" (*uaddr));                                        
   return result;                                                                 
 }
 int
 get_arg(char * ptr)
 {
   unsigned temp = 0;
   unsigned retval = 0;
   check_ptr_validity(ptr);
 
   temp = get_user(ptr);
   if(temp == -1)
     exit(-1);
   else
     retval = retval | (temp);
 
   temp = get_user(ptr+1);
   if(temp == -1)
     exit(-1);
   else
     retval = retval | (temp << 8);
 
   temp = get_user(ptr+2);
   if(temp == -1)
     exit(-1);
   else
     retval = retval | (temp << 16);
 
   temp = get_user(ptr+3);
   if(temp == -1)
     exit(-1);
   else
     retval = retval | (temp << 24);
 
   return retval;
 }
void
check_ptr_validity(void * ptr)
  {
    if(!(ptr>0x08048000 && ptr< PHYS_BASE ))
    {
      exit(-1);
    }
    void * pointer = pagedir_get_page(thread_current()->pagedir, ptr); //check if mapped
    if(!pointer)
    {
      exit(-1);
    }
}
 pintos.pdf에서 제공해준 get_user()를 이용하여,  get_arg()는 바이트를 읽어오는 주소가 유효한지를get_user()를 사용하여 연속적인 4바이트를 읽습니다. check_ptr_validity()는 인자로 들어온 주소값이 user stack에 위치해 있는지와 현재 쓰레드의 mapped된 영역을 가르키는지 확인합니다.  
위의 함수에서 error가 발생하는 경우 모두 exit(-1)을 실행합니다. 그럼 exit system call은 다시 process_exit()를 호출하면서 process가 실행을 위해 가지고 있던 file_descriptor들을 모두 free해주고
child list가 존재하면 그 child process들은 orphaned가 되므로 현재 child list의 모든 child_process를 remove해주고 free()해주고, 현재 쓰레드가 가지고 있는 pagedir도 제거해줍니다. 그리고 이 프로세스의 PID를 인자로 하는wait()함수가 호출되면 그때 parent가 가지고 있는 child list에서 struct child_process를 remove 해주고 free() 해준다. 
이렇게 해주면 user program을 구현하기 위해  process에 할당해 주었던 추가 메모리도 process가 exit되고 wait됨에 모두 메모리에서 해제가 된다.
---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable fails, so it cannot return before the new executable has completed loading.  How does your code ensure this?  How is the load success/failure status passed back to the thread that calls "exec"?
 이 상황을 해결하기 위해 value를 0으로 초기화 시킨 sema를 이용하였습니다. process_execute()안에서 child thread를 만들기 위한 thread_create()가 끝난 다음sema_down()을 통해 context switch가 일어나 start_process()안의 load가 먼저 끝나게 하였고  child thread내부에 is_loaded에 load의 성공 여부를 저장하고 sema_up()을 실행하고 thread_block()을 시켜주면서 parent thread의 context로 가서 child thread의 TID를 통해 child thread가 정상적으로 생성되었는지 확인하고 thread_unblock(child thread)을 실행하고 그 child thread의 is_loaded를 확인하면 된다.
>> B8: Consider parent process P with child process C.  How do you ensure proper synchronization and avoid race conditions when P calls wait(C) before C exits?  After C exits?  How do you ensure that all resources are freed in each case?  How about when P terminates without waiting, before C exits?  After C exits?  Are there any special cases?
process_wait(tid_t child_tid)함수는 1) P의 child_tid를 TID로 가진 C를 찾는다. 1_a) C가 없다면 bad-pid case로 -1을 반환한다.  2) C가 있다면 이 thread가 종료된 상태인지 is_exited의 변수를 이용해 확인한다. 2_a) 종료된 상태이면 exit status를 확인하고 resoure를 정리해주고 exit status를 반환한다. 2_b) 종료되지 않은 상태이면 wait-twice case를 확인하기 위해 C가 현재 P가 기다리고 있는지 확인하고 맞다면 -1을 반환한다. 2_c) 종료되지 않았고 P가 기다리고 있지 않으면 P는 C가 종료될 때 까지 기다려야 한다. Child thread내부에 is_p_waiting을 true로 바꾸고 current thread(parent thread)를 thread_block() 호출한다. blcoked된 parent는 child가 종료되면서 unblock을 호출로 실행된다. Child thread의 exit status를 저장하고 child thread의 resource를 정리해주고 exit status를 반환하다. 

How about when P terminates without waiting, before C exits?  After C exits?  
 P가 C를 waiting하지 않고 바로 종료하는 경우 C는 Orphaned process가 된다.  before C exits경우와 after C exits 경우의 차이점은 P가 terminates 하는 시점에 child list에 exited가 된 C가 있는지 없는 지의 차이 밖에 없습니다. After C exits의 경우 이 exit system call에 의해 parent가 가지고 있는 child_process structure빼고는 resource를 모두 정리하였고, P가 terminate하면서 이 child_process마저 다 정리한다. Befroe C exits의 경우 P가 terminates 하면 자신이 가지고 있는 child list안에 있는 모든 resource를 remove하고 메모리 해지를 해주므로 결과적으로 보았을때 두 경우 모두 불필요한 메모리가 발생하지 않게 다 정리해주었다.
---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the kernel in the way that you did?
Void check_ptr_validity(void * ptr)를 이용하여 ptr < PHYS_BASE 이고  ptr > 0x08048000(pintod.pdf page 26 ,user stack의 최하위 주소)로 ptr이 user stack영역에 있는지를 확인하였고 그다음 pagedir_get_page(thread_current()->pagedir, ptr)를 실행해서 ptr이 가르키는 곳이 mapped가 된 영역인지를 확인하였습니다. 위 3가지 조건 중 어느 하나라도 false이면 exit(-1)를 호출합니다. 강제로 exit()을 호출하여서 process를 종료하지 않으면 page fault를 일으키는데 page fault handler를 이용하는 것 보다 exit()을 이용하는 것이 process가 가진 resource들을 확실하게 해지해 줄 수 있으므로 memory leak을 방지하기 위해 exit()을 사용하였습니다. 
>> B10: What advantages or disadvantages can you see to your design for file descriptors?
File descriptor를 entire OS에서 unique한 값으로 할당 받게 구현하고 file에 접근할수 있는 file list는 process마다  저장 되어 있어서 list를 process들이 공유하지 못 하기 때문에 file의 isolation을 높임으로 file정보에 대한 안정성을 높여주었다.
>> B11: The default tid_t to pid_t mapping is the identity mapping. If you changed it, what advantages are there to your approach?			 
한 process가 한 thread만 실행하고 있으므로 tid_t와 pid_t사이에 1-1 correspondance가 보장되기 때문에 mapping이 사용되었지만, 보통의 OS를 생각해보면 한 Process안에서 multithread로 구현되기 때문에 지금의 디자인으로는 한계가 생긴다. 따라서 multithread를 고려한 design으로 바꾼다면 더 높은 performance를 내는 user program을 기대할수 있을 것이다. 
SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the course in future quarters.  Feel free to tell us anything you want--these questions are just to spur your thoughts.  You may also choose to respond anonymously in the course evaluations at the end of the quarter.

>> In your opinion, was this assignment or any one of the two problems in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in future quarters to help them solve the problems?  Conversely, did you find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist students, either for future quarters or the remaining projects?

>> Any other comments?
